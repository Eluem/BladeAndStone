extends Node2D
@export var collisionShape2D:CollisionShape2D

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta:float) -> void:
	pass

func _draw() -> void:
	#var parentTransform:Transform2D = (get_parent() as Node2D).transform
	#Draw head
	var points:PackedVector2Array = RectToVector2Array(collisionShape2D.shape.get_rect())
	draw_colored_polygon(points, Color.RED, points)
	#Draw left eye
	draw_line(Vector2(-13,3), Vector2(-13, -16), Color.BLUE, 4, true)
	#Draw right eye
	draw_line(Vector2(13,3), Vector2(13, -16), Color.BLUE, 4, true)
	#Draw mouth
	#draw_arc(Vector2(0,7), 14, deg_to_rad(15), deg_to_rad(165), 12, Color.BLUE, 4, true)
	draw_elliptical_arc(Vector2(0, 6), 20, 14, deg_to_rad(15), deg_to_rad(165), 100, Color.BLUE, 4, true)

func RectToVector2Array(rect:Rect2) -> PackedVector2Array:
	var points:PackedVector2Array = PackedVector2Array([
		Vector2(-rect.size.x/2, -rect.size.y/2),
		Vector2(rect.size.x/2, -rect.size.y/2),
		Vector2(rect.size.x/2, rect.size.y/2),
		Vector2(-rect.size.x/2, rect.size.y/2),
		])
	return points

'''
Generated by ChatGPT 4 using the prompt:
Using gdScript in Godot 4.2, create a function that can draw an elliptical arc using the formula for an ellipse.
'''
func draw_elliptical_arc(center:Vector2, xRadius:float, yRadius:float, start_angle:float, end_angle:float, steps:int, color:Color, width:float = -1, antialiased:bool = false) -> void:
	var previous_point:Vector2 = center + Vector2(xRadius * cos(start_angle), yRadius * sin(start_angle))
	var step_size:float = (end_angle - start_angle) / steps
	
	for i in range(1, steps + 1):
		var theta:float = start_angle + i * step_size
		var current_point:Vector2 = center + Vector2(xRadius * cos(theta), yRadius * sin(theta))
		draw_line(previous_point, current_point, color, width, antialiased)
		previous_point = current_point
